//
//  main.cpp
//  GuessingGame
//
//  Created by Alan Paul Paragas on 5/17/17.
//  Copyright Â© 2017 Alan Paul Paragas. All rights reserved.
//

#include <iostream>
#include <vector>
#include <pthread.h>
#include <unistd.h>
#include <string>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstring>
#include <cstdlib>
using namespace std;

const int PORTbegin=11600;
const int PORTend=11699;
const int MAXDISPLAY=3;

struct leaderboard{
    string username[MAXDISPLAY];
    long userguess[MAXDISPLAY];
};
struct userGuess {
    int UserNum;
    string username;
};

//void functions client list
void sendNUM(int sock, long number);
long recieveNUM(int sock);
void sendString(int sock, string word);
void printleaderboard(leaderboard Display);
string recieveString(int sock);
leaderboard recieveBoard(int sock);
//main functions
int main(int argc, const char * argv[]) {
    //variables
    int sock; //insert socket
    long guess; //for user guess
    int status; //for error checking
    bool guessed_right=false, finish=false;
    char *IPAddr=(char*)argv[1]; //holds IP
    unsigned long servIP; //holds server
    string name;
    
    //arg check
    if(argc < 3){
        printf("Need to pass correct number of arguments: 1)IP 2)PORT \n");
        exit(-1);
    }
    //SIGN PORT
    unsigned  short portnum= (unsigned short)atoi(argv[2]);
    if(portnum <PORTbegin || portnum > PORTend){
        printf("Invalid port entry, must be between port number 11600-11699\n");
        exit(-1);
    }
    
    //socket creation
    sock= socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock <0){
        printf( "Error with Socket\n");
        exit (-1);
    }
    //for IP address
   
    status= inet_pton(AF_INET,IPAddr, (void *)&servIP );
    if (status <=0) {
         printf( "Error with setting IP\n");
        exit(-1);
    }
    
    struct sockaddr_in servAddr;
    servAddr.sin_family=AF_INET;
    memset(&(servAddr.sin_zero), 0, 8);
    servAddr.sin_addr.s_addr=(servIP);
    servAddr.sin_port= htons(portnum);
    
    //connect to server
    
    status=connect(sock,(struct sockaddr*)&servAddr,sizeof(servAddr));
    {
        if(status < 0){
             printf("Cannot connect\n");
            exit(-1);
        }
    }
    //Alert if connect
     printf("Welcome to the Number Guessing Game!\n");
    
    //get user name
    printf("Enter your name:\n");
    cin>> name;
    sendString(sock, name);
     int turn=1;
    long getGuess= recieveNUM(sock);
    cout<<"FOR RUBIRIC: Random number generated by server: "<<getGuess<<endl;
    while(!guessed_right){
        printf("Turn:%d \n",(turn));//check turn
        printf("Enter a guess:\n");
        cin>>guess;
        
        //send guess
        sendNUM(sock, guess);
        if(guess<0 || guess >9999){
            printf("Error: Guess out of boundaries \n");
            continue;
        }
        
        long getcloseness= recieveNUM(sock);
        cout<<"Result of guess: "<<getcloseness<<endl;
        if(getGuess==guess){
            turn=turn-1;
            guessed_right=true;
        }
        turn++;
    }
    

    //recieve vicotory message to check turn count on server
    if(guessed_right){
        
        string victory=recieveString(sock);
        string victory2=recieveString(sock);
        long countturn= recieveNUM(sock);
        if(countturn==turn){
               cout<<victory<<countturn<<victory2<<endl;
        }
    }
    
    leaderboard current =recieveBoard(sock);//getboard
    printleaderboard(current); //Print board
    cout<<"Game Has Finished"<<endl;
    
    status=close(sock);
    if(status<0){
        printf("Error: Cannot close\n");
        exit(-1);
    }
    printf("DONE\n");
    return 0;
}

void sendNUM(int sock, long  number){
    long numsend= htonl(number);
    long bytecount=send(sock,(void*) &numsend, sizeof(numsend),0);
    if(bytecount!=sizeof(numsend)){
        printf("Error: Sending data \n");
        close(sock);
        exit(-1);
    }
}
long recieveNUM(int sock){
    long byteleft=sizeof(long);
    long num;
    char *bp=(char*)&num;
    while(byteleft>0){
        long byterecv=recv(sock,(void*)bp,byteleft,0);
        if(byterecv<=0){
            printf("Error: Recieving data \n");
            close(sock);
            exit(-1);
        }
        byteleft=byteleft-byterecv;
        bp=bp+byterecv;
    }
    num=ntohl(num);
    return num;
}
void sendString(int sock, string msg){
    long msglength =msg.length(); //get length of message
    char msgarr[msglength];
    strcpy(msgarr,msg.c_str());
    sendNUM(sock,msglength); //allows to set recieve length
    long bytesent=send(sock,(void *)msgarr,sizeof(msgarr),0);
    if (bytesent!=sizeof(msgarr)){
        close(sock);
        exit(-1);
    }
}
string  recieveString(int sock){
    string msgrec; //sends this string
    long byteleft= recieveNUM(sock);
    char msgarr[byteleft];
    char *bp=msgarr;//check this
    while(byteleft>0){
        long byteRecieve= recv(sock,(void *)bp,sizeof(msgarr),0);
        if(byteRecieve<=0){
            printf("Error: Recieving data \n");
            close(sock);
            exit(-1);
        }
        byteleft=byteleft-byteRecieve;
        bp=bp+byteRecieve;
    }
    msgrec=string(msgarr);
    return msgrec;
}
leaderboard recieveBoard(int sock){
    leaderboard display;
    for (int i=0; i<MAXDISPLAY;i++){
        display.username[i]=recieveString(sock);
        display.userguess[i]=recieveNUM(sock);
    }
    return display;
}
void printleaderboard(leaderboard Display){
    cout<<"LEADERBOARD \n___________"<<endl;
    for(int z=0;z<3;z++){
        cout<<z+1<<".  "<<Display.username[z]<< " with "<< Display.userguess[z]<<endl;
    }
}
